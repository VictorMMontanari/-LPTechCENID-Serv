'use strict';

const AWS = require('aws-sdk');
const sharp = require('sharp')
const stream = require('stream');

const S3 = new AWS.S3({
  signatureVersion: 'v4',
  secretAccessKey: 'bYYMJssCt4KaytRkN5cDjd/QD+WvekZrxAR4y7l3',
  accessKeyId: 'AKIAJPJHZ2RKWY47457Q'
});

const BUCKET_CLOUD = process.env.BUCKET_CLOUD;

// https://sketchboard.io/blog/serverless-image-resize-with-amazon-lambda
// https://aws.amazon.com/blogs/compute/resize-images-on-the-fly-with-amazon-s3-aws-lambda-and-amazon-api-gateway/
// https://www.smashingmagazine.com/2015/06/efficient-image-resizing-with-imagemagick/
exports.handler = function(event, context, callback) {
  console.log('event', JSON.stringify(event, null, 2))
  let record = event.Records[0]
  let s3 = record.s3
  let key = unescape(s3.object.key)
  let bucket = s3.bucket.name
  // %40sporephoto/3/lnkphotography/2/n6r949MLkOfm7J0Obm6E/0
  // should become
  // %40sporephoto/3/lnkphotography/1/n6r949MLkOfm7J0Obm6E/1
  key = key.replace('/2/', '/1/').replace('/0.jpg', '')
  console.log({ key, bucket })
  var timers = []
//http://sharp.readthedocs.io/en/stable/install/#aws-lambda
  let oldKey = `${key.replace('/1/', '/2/')}/0.jpg`
  console.log('oldKey', oldKey)
// let readableStream = S3.getObject({
//   Bucket: BUCKET_CLOUD,
//   Key: key
// }).createReadStream()
S3.getObject({
  Bucket: BUCKET_CLOUD,
  Key: oldKey
}, (error, data) => {
  console.log('asdf', error)
  Promise.all([
    upload(6000, 6, 85),
    upload(3000, 5, 85),
    upload(1600, 4, 75),
    upload(800, 3, 75),
    upload(400, 2, 75),
    upload(200, 1, 75)
  ])
  .catch(err => {
    console.log(err)
    callback(err)
  })
  .then(() => {
    console.log('Done!')
    context.succeed("Success! " + JSON.stringify({ timers }))
    callback()
  })

  function upload(size, index, quality) {
    var timer = new Date
    console.log('upload')
    const newKey = `${key}/${index}.jpg`
    let output = sharp(data.Body).jpeg({ quality }).resize(size)
    console.log('upload sharp', newKey)

    try {
      return new Promise((resolve, reject) => {
        console.log('promise called')
        try {
          let buffer = output
            .toBuffer()
            .then(buffer => {
              console.log('newKey', newKey)
              return S3.putObject({
                Body: buffer,
                Bucket: BUCKET_CLOUD,
                ContentType: 'image/jpeg',
                Key: newKey,
                ACL: 'public-read'
              }, (err) => {
                if (err) return callback(err)
                timers[index - 1] = (new Date).getTime() - timer
                console.log(timers)
                resolve()
              })
            })
            .catch(err => {
              console.log('err')
              console.log(err)
              return callback(err)
            })

          console.log('after promise')
          setTimeout(function(){}, 1000)
        } catch (e){
          console.log('error', e)
          return callback(e)
        }
      })
    } catch (e) {
      console.log(e)
      callback(e)
    }
  }
})
}
