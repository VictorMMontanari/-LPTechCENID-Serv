
var accessState = require('@front.build/fullstack/plugin/access-state')
var hydrateTree = require('@front.build/fullstack/plugin/hydrate-tree')
var joinText = require('@front.build/fullstack/plugin/join-text')
var checkState = require('@front.build/fullstack/plugin/check-state')
var compareState = require('@front.build/fullstack/plugin/compare-state')
var modelState = require('@front.build/fullstack/plugin/model-state')
var accessContext = require('@front.build/fullstack/plugin/access-context')
var generateID = require('@front.build/fullstack/plugin/generate-id')
var generateData = require('@front.build/fullstack/plugin/generate-data')
var runProcess = require('@front.build/fullstack/plugin/run-process')
var renderDom = require('@front.build/fullstack/plugin/render-html')
var initializeHTML = require('@front.build/fullstack/plugin/initialize-html')

var State = require('@front.build/fullstack/state')
var Front = require('@front.build/fullstack/front')
var Database = require('@front.build/fullstack/db')
var UI = require('@front.build/fullstack/ui')

module.exports = Build

function Build(plugins) {
  plugins = plugins || {}
  plugins['Hydrate tree'] = plugins['Hydrate tree'] || hydrateTree
  plugins['Join text'] = plugins['Join text'] || joinText
  plugins['Check state'] = plugins['Check state'] || checkState
  plugins['Compare state'] = plugins['Compare state'] || compareState
  plugins['Access context'] = plugins['Access context'] || accessContext
  plugins['Generate ID'] = plugins['Generate ID'] || generateID
  plugins['Generate data'] = plugins['Generate data'] || generateData
  plugins['Run process'] = plugins['Run process'] || runProcess
  plugins['Initialize HTML'] = plugins['Initialize HTML'] || runProcess
  plugins['Render DOM'] = plugins['Render DOM'] || renderDom
  plugins['Model state'] = plugins['Model state'] || renderDom
  plugins['Access state'] = plugins['Access state'] || renderDom
  this.ui = new UI
  this.db = new Database
  this.front = new Front(plugins, new State({ ui: this.ui, db: this.db }))
}

Build.prototype.dispatch = function(action, context, callback) {
  return this.front.dispatch(action, context, callback)
}
