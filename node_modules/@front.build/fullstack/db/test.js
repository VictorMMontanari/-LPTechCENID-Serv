
import Database from '../frontend/db'
import assert from 'assert'

const dev = process.env.DEV

var stripe = {
  "id": "ch_1BJWMY2eZvKYlo2CYHl8zLmF",
  "object": "charge",
  "amount": 999,
  "amount_refunded": 0,
  "application": null,
  "application_fee": null,
  "balance_transaction": "txn_19XJJ02eZvKYlo2ClwuJ1rbA",
  "captured": true,
  "created": 1509581714,
  "currency": "usd",
  "customer": "cus_AZxbpitDHffe61",
  "description": null,
  "destination": null,
  "dispute": null,
  "failure_code": null,
  "failure_message": null,
  "fraud_details": {
  },
  "invoice": "in_1BJVQM2eZvKYlo2CV1h7BZcg",
  "livemode": false,
  "metadata": {
  },
  "on_behalf_of": null,
  "order": null,
  "outcome": {
    "network_status": "approved_by_network",
    "reason": null,
    "risk_level": "normal",
    "seller_message": "Payment complete.",
    "type": "authorized"
  },
  "paid": true,
  "receipt_email": null,
  "receipt_number": null,
  "refunded": false,
  "refunds": {
    "object": "list",
    "data": [

    ],
    "has_more": false,
    "total_count": 0,
    "url": "/v1/charges/ch_1BJWMY2eZvKYlo2CYHl8zLmF/refunds"
  },
  "review": null,
  "shipping": null,
  "source": {
    "id": "card_1AEngD2eZvKYlo2CXx9f2l6K",
    "object": "card",
    "address_city": null,
    "address_country": null,
    "address_line1": null,
    "address_line1_check": null,
    "address_line2": null,
    "address_state": null,
    "address_zip": "94301",
    "address_zip_check": "pass",
    "brand": "Visa",
    "country": "US",
    "customer": "cus_AZxbpitDHffe61",
    "cvc_check": null,
    "dynamic_last4": null,
    "exp_month": 12,
    "exp_year": 2018,
    "fingerprint": "Xt5EWLLDS7FJjR1c",
    "funding": "credit",
    "last4": "4242",
    "metadata": {
    },
    "name": null,
    "tokenization_method": null
  },
  "source_transfer": null,
  "statement_descriptor": null,
  "status": "succeeded",
  "transfer_group": null
}

describe('Database', () => {
  describe('Models', () => {
    it('should define models', () => {
      var db = new Database
      db.model('Plane', 'Plane[id]')
      assert.deepEqual([ 'State', 'Plane' ], Object.keys(db.models))
    })

    // https://github.com/YuJianrong/fast-array-diff
    it('should define model fields', () => {
      var db = new Database
      // instanceof
      db.model('Plane', 'Plane[id]')
      db.model('Stripe charge', 'Stripe charge[id]')
      // assert plane has an id.
      db.field('State/plane', 'Plane')
      db.field('State/Currently selected plane', 'Plane')
      db.field('State/Current focusable', 'Single line text')
      db.field('State/HTML/title', 'Single line text')
      db.field('Plane/id', 'Single line text')
      db.field('Plane/container', 'Boolean')
      db.field('Plane/children[]', 'Plane')
      db.field('Plane/parent', 'Plane')
      db.field('Stripe charge/source/metadata/foo', 'Single line text')
      db.field('Stripe charge/source/metadata', 'Object')
      // If it's not already equivalent, it copies it over to the collection
      // because this property is of type Plane.
      db.set('plane', { id: 1 })

      assert.deepEqual([{ id: 1 }], db.get('Plane[id]'))
      // assert.equal(true, db.state.children.plane == db.state.children['Plane[id]'].children['1'])
      db.set('Plane[id]/1/container', true)
      assert.deepEqual(db.get('plane'), { id: 1, container: true })

      db.set('plane/children[]', [ { id: 10 } ])
      assert.equal(2, db.get('Plane[id]').length)

      db.set('plane/children[]/0/children[]', [ { id: 100 } ])
      db.set('plane/children[]/0/children[]/0/children[]', [ { id: 1000 } ])
      assert.equal(4, db.get('Plane[id]').length)
      db.set('plane/children[]/0/children[]/0/children[]/0/container', true)
      assert.equal(true, db.get('Plane[id]/1000/container'))
    })

    it('should parse long path into child path', function(){
      var db = new Database()
      db.model('Plane', 'Plane[id]')
      db.field('State/plane', 'Plane')
      db.field('State/background/size', 'Number')
      db.field('Plane/container', 'Boolean')
      db.field('Plane/fill', 'Single line text')
      db.field('Plane/background/size', 'Number')
      db.field('Plane/children[]', 'Plane')
      db.field('Plane/parent', 'Plane')

      db.set('plane', { id: 1, fill: 'black' })
      db.set('background/size', 500)
      db.set('Plane[id]/1/container', true)
      db.set('plane/children[]', [ { id: 10, background: { size: 5000 } } ])
      db.set('plane/children[]/0/children[]', [ { id: 100 } ])
      db.set('plane/children[]/0/children[]/0/children[]', [ { id: 1000 } ])
      db.set('plane/children[]/0/children[]/0/children[]/0/container', true)

      var path = db.findPath('plane')
      assert.equal('State/plane', path)

      var path = db.findPath('background/size')
      assert.equal('State/background/size', path)

      var path = db.findPath('Plane[id]/1')
      assert.equal('Plane[id]/1', path)

      var path = db.findPath('plane/children[]')
      assert.equal('Plane[id]/1/children[]', path)

      var path = db.findPath('plane/children[]/0')
      assert.equal('Plane[id]/10', path)

      var path = db.findPath('plane/children[]/0/background/size')
      assert.equal('Plane[id]/10/background/size', path)

      var path = db.findPath('plane/children[]/0/children[]')
      assert.equal('Plane[id]/10/children[]', path)

      var path = db.findPath('plane/children[]/0/children[]/0')
      assert.equal('Plane[id]/100', path)

      var path = db.findPath('plane/children[]/0/children[]/0/children[]')
      assert.equal('Plane[id]/100/children[]', path)

      var path = db.findPath('plane/children[]/0/children[]/0/children[]/0')
      assert.equal('Plane[id]/1000', path)

      var path = db.findPath('plane/children[]/0/children[]/0/children[]/0/container')
      assert.equal('Plane[id]/1000/container', path)

      var path = db.findPath('plane/fill')
      assert.equal('Plane[id]/1/fill', path)
    })

    it('should serialize diffs into model changes', function(done){
      var db = new Database()
      db.model('Plane', 'Plane[id]')
      db.field('State/plane', 'Plane')
      db.field('Plane/container', 'Boolean')
      db.field('Plane/fill', 'Single line text')
      db.field('Plane/children[]', 'Plane')
      db.field('Plane/parent', 'Plane')

      db.on('diff', function(collections){
        assert.deepEqual(collections, {
          "Plane": {
            "1": {
              "id": 1,
              "fill": "black",
              "container": true,
              "children[]": [
                {
                  "id": 10
                }
              ]
            },
            "10": {
              "id": 10,
              "children[]": [
                {
                  "id": 100
                }
              ]
            },
            "100": {
              "id": 100,
              "children[]": [
                {
                  "id": 1000
                }
              ]
            },
            "1000": {
              "id": 1000,
              "fill": "green",
              "container": true
            }
          },
          "State": {
            "plane": {
              "id": 1
            }
          }
        })
        done()
      })

      db.set('plane', { id: 1, fill: 'black' })
      db.set('Plane[id]/1/container', true)
      db.set('plane/children[]', [ { id: 10 } ])
      db.set('plane/children[]/0/children[]', [ { id: 100 } ])
      db.set('plane/children[]/0/children[]/0/children[]', [ { id: 1000, fill: 'green' } ])
      db.set('plane/children[]/0/children[]/0/children[]/0/container', true)
    })
  })

  describe('Types', () => {
    it('Generates aliases', function(){
      var db = new Database()
      var dta = db.datatype('Planes/collection[]')
      var dtb = db.datatype('Plane')
      db.equivalent('Planes/collection[]', 'Plane')
      assert.equal(true, dta.aliases[dtb.id] == dtb, 'dta == dtb')
      assert.equal(true, dtb.aliases[dta.id] == dta, 'dta == dtb')
      assert.deepEqual(dta.canonical(), dta)
      assert.equal(true, dtb.canonical() == dta)
    })

    it('Generates canonicals', function(){
      var db = new Database()
      var dta = db.datatype('Planes/collection[]')
      var dtb = db.datatype('Plane')
      db.equivalent('Planes/collection[]', 'Plane')
      db.canonical('Plane')
      assert.equal(true, dta.canonical() == dtb)
      assert.equal(true, dtb.canonical() == dtb)
    })

    it('Tells all the paths it will affect if one of its contents change.', function(){
      var db = new Database()
      var dta = db.datatype('Planes/collection[]')
      assert.deepEqual(dta.affectivePaths(), [ 'Planes/collection[]' ])
    })

    it('Tells all the paths it will affect if one of its contents change, with aliases.', function(){
      var db = new Database()
      var dta = db.datatype('Planes/collection[]')
      var dtb = db.datatype('Plane')
      db.equivalent('Planes/collection[]', 'Plane')
      assert.deepEqual(dta.affectivePaths(), [ 'Planes/collection[]', 'Plane' ])
    })

    it('Tells all the paths it will affect if one of its contents change, with children.', function(){
      var db = new Database()
      db.datatype('Planes/collection[]/0/container')
      var dta = db.datatype('Planes/collection[]')
      assert.deepEqual(dta.affectivePaths(), [ 'Planes/collection[]',
        'Planes/collection[]/0',
        'Planes/collection[]/0/container' ])
    })

    it('Tells all the paths it will affect if one of its contents change, with children aliases.', function(){
      var db = new Database()
      db.datatype('Planes/collection[]/0/container')
      db.datatype('Plane')
      db.equivalent('Planes/collection[]', 'Plane')
      var dta = db.datatype('Planes/collection[]')
      assert.deepEqual(dta.affectivePaths().sort(), [
        'Plane',
        'Plane/0',
        'Plane/0/container',
        'Planes/collection[]',
        'Planes/collection[]/0',
        'Planes/collection[]/0/container' ].sort())
    })

    it('Tells all the paths it will affect if one of its contents change, with children aliases updated.', function(){
      var db = new Database()
      db.datatype('Planes/collection[]/0/container')
      db.datatype('Plane')
      db.equivalent('Planes/collection[]', 'Plane')
      db.datatype('Planes/collection[]/0/fill')
      var dta = db.datatype('Planes/collection[]')
      assert.deepEqual(dta.affectivePaths().sort(), [
        'Plane',
        'Plane/0',
        'Plane/0/fill',
        'Plane/0/container',
        'Planes/collection[]',
        'Planes/collection[]/0',
        'Planes/collection[]/0/fill',
        'Planes/collection[]/0/container' ].sort())
    })
  })

  it('Settings/background/size', () => {
    let db = new Database()
    db.set('Settings/background/size', 10)
    assert.equal(10, db.get('Settings/background/size'))
    assert.deepEqual({ size: 10 }, db.get('Settings/background'))
    assert.deepEqual({ background: { size: 10 } }, db.get('Settings'))
  })

  it('Settings/background/size and Settings/title', () => {
    let db = new Database()
    db.set('Settings/background/size', 10)
    db.set('Settings/title', 'Foo')
    assert.deepEqual({ background: { size: 10 }, title: 'Foo' }, db.get('Settings'))
  })

  it('Settings/background/size and Settings/title with updates', () => {
    let db = new Database()
    db.set('Settings/background/size', 10)
    db.set('Settings/title', 'Foo')
    db.set('Settings/title', 'Bar')
    assert.deepEqual({ background: { size: 10 }, title: 'Bar' }, db.get('Settings'))
  })

  it('Settings/background object', () => {
    let db = new Database()
    db.set('Settings/background', { size: 10 })
    assert.deepEqual({ background: { size: 10 } }, db.get('Settings'))
  })

  it('Settings object', () => {
    let db = new Database()
    db.set('Settings', { background: { size: 10 } })
    assert.deepEqual({ background: { size: 10 } }, db.get('Settings'))
    assert.deepEqual(10, db.get('Settings/background/size'))
  })

  describe('Array', () => {
    it('Planes', () => {
      let db = new Database()
      db.set('Planes', { collection: [{ container: true }, { container: false }] })
      assert.deepEqual({ container: true }, db.get('Planes/collection[]/0'))
      assert.deepEqual([ { container: true }, { container: false } ], db.get('Planes/collection[]'))
      assert.deepEqual({ collection: [ { container: true }, { container: false } ] }, db.get('Planes'))
    })

    it('Planes/collection[]', () => {
      let db = new Database()
      db.set('Planes/collection[]', [{ container: true }, { container: false }])
      // console.log(JSON.stringify(db,null,2))
      assert.deepEqual([ { container: true }, { container: false } ], db.get('Planes/collection[]'))
      // assert.deepEqual({ collection: [ { container: true }, { container: false } ] }, db.get('Planes'))
    })

    it('Planes/collection[id]', () => {
      let db = new Database()
      db.set('Planes/collection[id]', [{ id: 1, container: true }, { id: 2, container: false }])
      assert.deepEqual([{ id: 1, container: true }, { id: 2, container: false }], db.get('Planes/collection[id]'))
      assert.deepEqual(db.get('Planes'), { collection: [ { id: 1, container: true }, { id: 2, container: false } ] })
    })

    it('Planes/collection[id] twice', () => {
      let db = new Database()
      db.set('Planes/collection[id]', [{ id: 1, container: true }, { id: 2, container: false }])
      db.set('Planes/collection[id]', [{ id: 3, container: true }, { id: 4, container: false }])
      assert.deepEqual([{ id: 1, container: true }, { id: 2, container: false }, { id: 3, container: true }, { id: 4, container: false }], db.get('Planes/collection[id]'))
    })

    it.skip('Planes/collection[id]/1', () => {
      let db = new Database()
      db.set('Planes/collection[id]', [{ id: 1, container: true }, { id: 2, container: false }])
      assert.deepEqual({ id: 1, container: true }, db.get('Planes/collection[id]/1'))
      db.set('Planes/collection[id]/1/container', false)
      assert.deepEqual({ id: 1, container: false }, db.get('Planes/collection[id]/1'))
    })

    it('Planes/collection[id]/2/container', () => {
      let db = new Database()
      db.set('Planes/collection[id]', [{ id: 1, container: true }, { id: 2, container: false }])
      assert.deepEqual(false, db.get('Planes/collection[id]/2/container'))
    })

    it('Planes/collection[id]/2 null', () => {
      let db = new Database()
      db.set('Planes/collection[id]', [{ id: 1, container: true }, { id: 2, container: false }])
      db.set('Planes/collection[id]/2', null)
      assert.deepEqual(null, db.get('Planes/collection[id]/2'))
    })

    it('Nested arrays', () => {
      let db = new Database()
      db.set('Records[]/0/Items[]/0', { ID: 10 })
      assert.deepEqual(db.get('Records[]'), [
        {
          "Items": [
            {
              "ID": 10
            }
          ]
        }
      ])
    })
  })

  describe('Schemas', () => {
    it('should create schema', () => {
      let db = new Database
      db.set('Planes/collection[]/0/container', true)
      db.equivalent('Plane', 'Planes/collection[]')
      var schema = db.schema('Planes')
      assert.deepEqual(schema, {
        "equivalencies": [
          "Planes"
        ],
        "instanceofs": [],
        "subsetofs": [],
        "array": false,
        "properties": {
          "collection[]": {
            "equivalencies": [
              "Planes/collection[]",
              "Plane"
            ],
            "instanceofs": [],
            "subsetofs": [],
            "array": true
          }
        }
      })
      // This creates a schema.
      // db.instanceof('Plane', 'plane')
      // db.instanceof('Plane', 'plane/children[]')
    })

    it('should create instanceof schema', () => {
      var state = {
        Foo: 'bar',
        plane: {
          id: 10,
          markup: 'div',
          fill: 'red',
          container: true,
          placeholderColor:'green',
          children: [
            {
              id: 20,
              fill: 'green',
              height: '30px',
              stroke: 'black',
              container: true,
              children: [
                {
                  id: 200,
                  fill: 'pink',
                  stroke: 'black',
                  height: '50px',
                  container: true
                },
                {
                  id: 200,
                  fill: 'pink',
                  stroke: 'black',
                  height: '50px',
                  container: true
                }
              ]
            },
            {
              id: 30,
              fill: 'green',
              stroke: 'black',
              container: true,
              height: '30px'
            }
          ]
        }
      }
      let db = new Database()
      db.set('plane', state.plane)
      // db.equivalent('Plane[id]', 'Planes/collection[id]')
      // db.instanceof('Plane', 'Planes/collection[]')

      db.instanceof('Plane[id]', 'plane')

      assert.equal(JSON.stringify(db.get('plane'),null,2), JSON.stringify(state.plane,null,2))

      db.set('Plane[id]/10/fill', 'blue')
      assert.equal('blue', db.get('plane/fill'))

      // console.log(JSON.stringify(db.toJSON(),null,2))

      db.subsetof('Plane[id]', 'plane/children[]')
      assert.equal(3, db.get('Plane[id]').length)
      // assert.equal('blue', db.get('Plane[id]/10/fill'))
      db.set('plane/children[]', [
      {
        id: 100,
        fill: 'gray',
        stroke: 'black',
        container: true,
        height: '30px'
      }])
      assert.equal(4, db.get('Plane[id]').length)
      assert.deepEqual(db.get('Plane[id]/100'), {
        id: 100,
        fill: 'gray',
        stroke: 'black',
        container: true,
        height: '30px'
      })
      assert.deepEqual(db.get('plane/children[]/2'), {
        id: 100,
        fill: 'gray',
        stroke: 'black',
        container: true,
        height: '30px'
      })
    })
  })

  describe('Nested data', () => {
    it('should work', () => {
      var state = {
        Foo: 'bar',
        plane: {
          id: 10,
          markup: 'div',
          fill: 'red',
          container: true,
          placeholderColor:'green',
          children: [
            {
              id: 20,
              fill: 'green',
              height: '30px',
              stroke: 'black',
              container: true,
              children: [
                {
                  id: 200,
                  fill: 'blue',
                  stroke: 'black',
                  height: '50px',
                  container: true
                },
                {
                  id: 200,
                  fill: 'blue',
                  stroke: 'black',
                  height: '50px',
                  container: true
                }
              ]
            },
            {
              id: 30,
              fill: 'green',
              stroke: 'black',
              container: true,
              height: '30px'
            }
          ]
        }
      }

      let db = new Database()
      db.set('plane', state.plane)

      // console.log(JSON.stringify(db.get('plane'),null,2))
      assert.deepEqual(db.get('plane'), state.plane)
      assert.equal(true, Array.isArray(db.get('plane').children[0].children), JSON.stringify(db.get('plane').children[0].children) + ' isArray')
    })
  })

  describe('Aliases', () => {
    it('Planes/collection[id] -> Plane', () => {
      let db = new Database()
      db.equivalent('Plane', 'Planes/collection[]')
      db.set('Planes/collection[]', [{ container: true }])
      // assert.deepEqual(true, db.get('Planes/collection[]/0/container'))
      // console.log(JSON.stringify(db.datatypes.Database.children.Plane,null,2))
      // assert.deepEqual(true, db.get('Plane/0/container'))
    })

    it.skip('Plane -> Currently selected plane', () => {
      let db = new Database()
      db.equivalent('Planes/collection[]', 'Plane')
      db.set('Planes/collection[]', [{ container: true }])
      db.equivalent('Currently selected plane', 'Plane/0')
      db.set('Currently selected plane', db.get('Planes/collection[]/0'))
      db.set('Currently selected plane/container', false)
      assert.deepEqual(false, db.get('Currently selected plane/container'))
      assert.deepEqual(false, db.get('Plane/0/container'))
      assert.deepEqual(false, db.get('Planes/collection[]/0/container'))
    })
  })

  describe('Remove', function(){
    it('should remove data', function(){
      var db = new Database()
      db.model('Plane', 'Plane[id]')
      db.field('State/plane', 'Plane')
      db.field('State/background/size', 'Number')
      db.field('Plane/container', 'Boolean')
      db.field('Plane/fill', 'Single line text')
      db.field('Plane/background/size', 'Number')
      db.field('Plane/children[]', 'Plane')
      db.field('Plane/parent', 'Plane')

      db.set('plane', { id: 1, fill: 'black' })
      db.set('background/size', 500)
      db.set('Plane[id]/1/container', true)
      db.set('plane/children[]', [ { id: 10, background: { size: 5000 } } ])
      db.set('plane/children[]/0/children[]', [ { id: 100 } ])
      db.set('plane/children[]/0/children[]/0/children[]', [ { id: 1000 } ])
      db.set('plane/children[]/0/children[]/0/children[]/0/container', true)

      assert.equal(4, db.get('Plane[id]').length)
      db.set('plane/children[]/0', undefined)
      assert.deepEqual([], db.get('plane/children[]'))
      assert.equal(3, db.get('Plane[id]').length)
    })
  })
})
