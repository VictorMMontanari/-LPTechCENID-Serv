
var merge = require('../utils/merge')
var Emitter = require('component-emitter')
var cuid = require('shortid')
var cloneDeep = require('lodash.clonedeep')
var marked = require('marked')
var escapeHTML = require('escape-html')
var isWindow = typeof window != 'undefined'
var isWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope
var isBrowser = isWorker || isWindow
var isServer = !isBrowser

/**
 * Expose `UI`.
 */

module.exports = UI

/**
 * UI
 */

function UI() {
  this.handlers = {
    click: {},
    type: {},
    input: {},
    change: {},
    focus: {},
    keydown: {},
    blur: {},
    drag: {},
    drop: {}
  }
  this.subscriptions = {}
  this.dynamicSubscriptions = {}
  this.children = {}
  this.planes = {}
  this.keys = {
    forward: {},
    backward: {}
  }
  this.templates = {}
  this.changes = {}
  this.styles = {}
  this.state = {
    toplevel: {},
    planes: {}
  }
}

UI.prototype.plane = function(toplevel) {
  this.toplevel = toplevel
}

/**
 * Make this an `Emitter`.
 */

Emitter(UI.prototype)

UI.prototype.render = function(plane) {
  var updates = this.batch()
  var value = this.stringify(plane)
  merge(this, this.updates)
  return { updates: updates, markup: value }
}

UI.prototype.batch = function(){
  return this.updates = {
    styles: {},
    templates: {},
    keys: {
      forward: {},
      backward: {}
    },
    children: {},
    planes: {},
    subscriptions: {},
    dynamicSubscriptions: {},
    handlers: {
      click: {},
      type: {},
      input: {},
      change: {},
      focus: {},
      keydown: {},
      blur: {},
      drag: {},
      drop: {}
    }
  }
}

UI.prototype.stringify = function(plane) {
  plane = plane || this.toplevel
  var states = this.state.planes
  var self = this

  if (plane.tree) {
    var toplevel = this.get(plane, 'tree')
    plane.treeRecord = toplevel
    plane.treeDepth = 0
  }

  plane.id = plane.id == null ? ('x' + cuid()) : plane.id
  var id = this.get(plane, 'id')
  var state = states[id] = states[id] || {}

  this.updates.planes[id] = plane

  if (plane.list) {
    if (!plane.key) throw new Error('Must define a key.')
    var self = this
    self.updates.keys.forward[id] = {}
    self.updates.keys.backward[id] = {}
    var list = this.get(plane, 'list')
    self.updates.templates[id] = []
    var str = list.map(function(item, index){
      var clone = cloneDeep(plane)
      delete clone.list
      if (typeof clone.id == 'string') delete clone.id
      clone.listChildIndex = index
      clone.listRecord = item
      var str = self.stringify(clone)
      var key = self.get(clone, 'key')
      var cloneId = self.get(clone, 'id')
      self.updates.templates[id].push(cloneId)
      self.updates.keys.forward[id][key] = cloneId
      self.updates.keys.backward[id][cloneId] = key
      return str
    }).join('')
    return '<template id="' + id + '"></template>' + str
    return str
  }

  var present = this.get(plane, 'present')
  state.present = present
  if (present === false) {
    return '<template id="' + id + '"></template>'
  }

  var m = this.get(plane, 'markup') || 'div'
  state.markup = m
  var self = this

  var markup = ['<' + m + ' id="' + id + '"']
  var classes = ['layout-plane']

  setClass('container', 'layout-container')
  setClass('vertical', 'layout-vertical')
  setClass('horizontal', 'layout-horizontal')
  setClass('hcenter', 'layout-horizontal-center')
  setClass('vcenter', 'layout-vertical-center')
  setClass('absolute', 'layout-absolute')
  setClass('grow', 'layout-grow')
  setClass('shrink', 'layout-shrink')
  setClass('spread', 'layout-spread')
  setClass('right', 'layout-right')
  setClass('selected')
  setClass('disabled')
  setClass('focused')
  setClass('draggable')
  setClass('dropzone')
  setClass('scrollable')
  setClass('clickable', 'cursor-pointer')
  setClass('uppercase', 'text-uppercase')
  if (plane.icon) {
    var value = self.get(plane, 'icon')
    state.icon = value
    if (value) {
      classes.push('fa')
      classes.push('fa-' + value)
    }
  }

  if (classes.length) markup.push(' class="' + classes.join(' ') + '"')

  var styles = []
  setStyle('fill', ['background'])
  setStyle('outline', ['outline'])
  setStyle('position', ['order'])
  // https://stackoverflow.com/questions/7339333/styling-text-input-caret
  setStyle('caretColor', ['caret-color'])
  setStyle('width', ['width', 'max-width', 'min-width'])
  setStyle('minWidth', ['min-width'])
  setStyle('maxWidth', ['max-width'])
  setStyle('height', ['height', 'max-height', 'min-height'])
  setStyle('minHeight', ['min-height'])
  setStyle('maxHeight', ['max-height'])
  setStyle('color', ['color'])
  setStyle('padding', ['padding'])
  setStyle('paddingBottom', ['padding-bottom'])
  setStyle('paddingTop', ['padding-top'])
  setStyle('paddingLeft', ['padding-left'])
  setStyle('paddingRight', ['padding-right'])
  setStyle('fontSize', ['font-size'])
  setStyle('fontWeight', ['font-weight'])
  setStyle('fontFamily', ['font-family'])
  setStyle('cursor', ['cursor'])

  var colorData = {}
  if (plane.stroke) {
    colorData.borderColor = this.get(plane, 'stroke')
    colorData.borderWidth = '1px'
    colorData.borderStyle = 'solid'
  }
  if (plane.strokeBottom) {
    colorData.borderBottomColor = plane.strokeBottom
    colorData.borderBottomWidth = '1px'
    colorData.borderBottomStyle = 'solid'
  }
  if (plane.strokeTop) {
    colorData.borderTopColor = plane.strokeTop
    colorData.borderTopWidth = '1px'
    colorData.borderTopStyle = 'solid'
  }
  if (plane.strokeLeft) {
    colorData.borderLeftWidth = '1px'
    colorData.borderLeftStyle = 'solid'
    colorData.borderLeftColor = plane.strokeLeft
  }
  if (plane.strokeRight) {
    colorData.borderRightColor = plane.strokeRight
    colorData.borderRightWidth = '1px'
    colorData.borderRightStyle = 'solid'
  }
  if (plane.strokeWidth) colorData.borderWidth = plane.strokeWidth
  if (plane.strokeStyle) colorData.borderStyle = plane.strokeStyle

  if (colorData.borderColor) {
    styles.push('border:' + colorData.borderWidth + ' ' + colorData.borderStyle + ' ' + colorData.borderColor)
  }

  setAttribute('selected', 'aria-selected')
  setAttribute('description', 'aria-describedby')
  setAttribute('role', 'role')
  setAttribute('grid', 'role', 'grid')

  // https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
  // https://stackoverflow.com/questions/6195329/how-can-you-hide-the-arrow-that-is-displayed-by-default-on-the-html5-details-e/6202729#6202729
  if (m == 'input') {
    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input
    setAttribute('name', 'name')
    setAttribute('defaultValue', 'value')
    setAttribute('type', 'type')
    setAttribute('placeholder', 'placeholder')
    setAttribute('readonly', 'readonly')
    setAttribute('required', 'required')
    setAttribute('accept', 'accept')
    setAttribute('autofocus', 'autofocus')
    setAttribute('inputmode', 'inputmode')
    setAttribute('label', 'aria-labelledby')
    markup.push(' spellcheck="false"')
    markup.push(' autocomplete="off"')
    markup.push(' autocorrect="off"')
    markup.push(' autocapitalize="none"')
  }
  if (markup == 'select') {
    setAttribute('name', 'name')
    if (!plane.role) markup.push(' role="listbox"')
  }
  if (m == 'ol') {
    setAttribute('reversed', 'reversed')
    setAttribute('start', 'start')
  }
  if (m == 'option') {
    setAttribute('selected', 'selected')
    setAttribute('value', 'value')
  }
  // itemprop itemtype itemscope
  if (m == 'label') setAttribute('for', 'for')
  if (m == 'form') setAttribute('novalidate', 'novalidate')
  if (m == 'a') {
    setAttribute('openInNewWindow', 'target', '_blank')
    setAttribute('link', 'href')
    setAttribute('download', 'download')
  }
  if (m == 'img') {
    setAttribute('image', 'src')
  }
  if (m == 'input' && plane.type == 'checkbox' && !plane.role) {
    markup.push(' role="checkbox"')
  }
  // <button>, <command>, <fieldset>, <input>, <keygen>, <optgroup>, <option>, <select>, <textarea>
  if (m == 'button' || m == 'fieldset' || m == 'input' || m == 'option' || m == 'select' || m == 'textarea') {
    setAttribute('disabled', 'disabled')
  }
  // <button>, <fieldset>, <input>, <keygen>, <label>, <meter>, <object>, <output>, <progress>, <select>, <textarea>
  if (m == 'form') {
    if (!plane.role) markup.push(' role="form"')
  }
  setAttribute('form', 'form')
  if (plane.draggable) markup.push(' draggable="true"')
  setAttribute('dropzone', 'dropzone', 'move')
  setAttribute('focusable', 'tabindex', '-1')
  setAttribute('hint', 'title')
  setAttribute('hidden', 'hidden')
  // <td>, <th>:headers
  // <a>
  if (m == 'blockquote') {
    setAttribute('cite', 'cite')
  }
  if (m == 'time') {
    setAttribute('datetime', 'datetime')
  }

  var globalStyles = this.updates.styles[id] = {
    placeholder: [],
    drag: [],
    drop: [],
    selected: [],
    focused: [],
    checked: [],
    hovered: []
  }
  // https://gist.github.com/steveosoule/5952929
  if (plane.placeholderColor) {
    var placeholderColor = this.get(plane, 'placeholderColor')
    if (placeholderColor) {
      globalStyles.placeholder.push('color:' + placeholderColor)
    }
  }
  if (plane.checkedFill) {
    var checkedFill = this.get(plane, 'checkedFill')
    if (checkedFill) {
      globalStyles.checked.push('background:' + checkedFill + ' !important')
    }
  }
  var focusedShadows = []
  if (plane.focusedInnerShadow) {
    var focusedInnerShadow = this.get(plane, 'focusedInnerShadow')
    if (focusedInnerShadow) {
      focusedShadows.push('inset 0px 0px 5px 2px ' + focusedInnerShadow)
    }
  }
  if (plane.focusedOuterShadow) {
    var focusedOuterShadow = this.get(plane, 'focusedOuterShadow')
    if (focusedOuterShadow) {
      focusedShadows.push('0px 0px 5px 2px ' + focusedOuterShadow)
    }
  }
  if (focusedShadows.length) {
    globalStyles.focused.push('box-shadow:' + focusedShadows.join(','))
  }

  var selectedShadows = []
  if (plane.selectedInnerShadow) {
    var selectedInnerShadow = this.get(plane, 'selectedInnerShadow')
    if (selectedInnerShadow) {
      selectedShadows.push('inset 0px 0px 5px 2px ' + selectedInnerShadow)
    }
  }
  if (plane.selectedOuterShadow) {
    var selectedOuterShadow = this.get(plane, 'selectedOuterShadow')
    if (selectedOuterShadow) {
      selectedShadows.push('0px 0px 5px 2px ' + selectedOuterShadow)
    }
  }
  if (selectedShadows.length) {
    globalStyles.selected.push('box-shadow:' + selectedShadows.join(','))
  }

  if (plane.draggable && plane.dragFill) {
    var fill = this.get(plane, 'dragFill')
    globalStyles.drag.push('background:' + fill + ' !important')
  }
  if (plane.dropzone && plane.dropFill) {
    var fill = this.get(plane, 'dropFill')
    globalStyles.drop.push('background:' + fill + ' !important')
  }
  if (styles.length) markup.push(' style="' + styles.join(';') + '"')
  markup.push('>')

  var markdown = plane.markdown && this.get(plane, 'markdown')

  if (plane.content) {
    var content = this.get(plane, 'content')
    if (content) {
      if (markdown) {
        markup.push(marked(content))
      } else {
        markup.push(escapeHTML(content))
      }
    }
  }

  if (plane.treeRecord) {
    var layer = this.get(plane, 'layer')
    self.updates.keys.forward[id] = {}
    self.updates.keys.backward[id] = {}
    self.updates.templates[id] = []
    markup.push('<template id="' + id + '"></template>')
    layer.forEach(function(child, i){
      var clone = cloneDeep(plane)
      if (typeof clone.id == 'string') delete clone.id
      // delete clone.id
      delete clone.tree
      clone.treeRecord = child
      clone.treeDepth = plane.treeDepth + 1
      clone.treeChildIndex = i
      var key = self.get(clone, 'key')
      var cloneId = self.get(clone, 'id')
      self.updates.templates[id].push(cloneId)
      self.updates.keys.forward[id][key] = cloneId
      self.updates.keys.backward[id][cloneId] = key
      markup.push(self.stringify(clone))
    })
  }

  function setClass(property, classname) {
    classname = classname || property
    if (plane[property]) {
      var value = self.get(plane, property)
      if (value) classes.push(classname)
    }
  }

  function setStyle(property, styleProperties) {
    if (plane[property]) {
      var value = self.get(plane, property)
      if (value) {
        for (var i = 0, n = styleProperties.length; i < n; i++) {
          styles.push(styleProperties[i] + ':' + value)
        }
      }
    }
  }

  function setAttribute(property, attribute, attributeValue) {
    if (plane[property]) {
      var value = self.get(plane, property)
      if (value != null) {
        value = String(attributeValue || value).replace(/\"/g, "&quot;")
        markup.push(' ' + attribute + '="' + (attributeValue || value) + '"')
      }
    }
  }

  if (plane.focusable) {
    this.updates.handlers.focus[id] = true
    this.updates.handlers.blur[id] = true
  }

  if (plane.clickAction) {
    this.updates.handlers.click[id] = true
  }

  if (plane.dropAction) {
    this.updates.handlers.drop[id] = true
  }

  if (plane.inputAction) {
    this.updates.handlers.input[id] = true
  }

  if (plane.changeAction) {
    this.updates.handlers.input[id] = true
  }

  if (plane.enterAction || plane.leftAction || plane.rightAction || plane.upAction || plane.downAction || plane.escapeAction || plane.tabAction || plane.deleteAction) {
    this.updates.handlers.keydown[id] = true
  }

  if (plane.typeAction) {
    this.updates.handlers.type[id] = true
  }

  if (plane.children) {
    self.updates.children[id] = self.updates.children[id] || {}
    plane.children.forEach(function(child){
      var str = self.stringify(child)
      self.updates.children[id][self.get(child, 'id')] = true
      markup.push(str)
    })
  }

  if (plane.setupAction && isBrowser) {
    this.front.dispatch(plane.setupAction, plane)
  }

  if (markup == 'input' || markup == 'img') {
    markup.push('/>')
  } else {
    markup.push('</' + m + '>')
  }

  var body = markup.join('')

  if (!isBrowser && plane == this.toplevel) {
    var html = ['<!doctype html><head><link rel="stylesheet" href="/front.build.css"/>']
    var outputStyles = []
    for (var planeId in this.updates.styles) {
      var styles = this.updates.styles[planeId]
      if (styles.placeholder.length) {
        outputStyles.push('#' + planeId + '::placeholder, #' + planeId + ' *::placeholder{' + styles.placeholder.join(';') + ' !important}')
      }
      if (styles.checked.length) {
        outputStyles.push('#' + planeId + ':checked{' + styles.checked.join(';') + '}')
      }
      if (styles.focused.length) {
        outputStyles.push('#' + planeId + '.focused{' + styles.focused.join(';') + '}')
      }
      if (styles.selected.length) {
        outputStyles.push('#' + planeId + '.selected{' + styles.selected.join(';') + '}')
      }
      if (styles.drag.length) {
        outputStyles.push('#' + planeId + '.drag{' + styles.drag.join(';') + '}')
      }
      if (styles.drop.length) {
        outputStyles.push('#' + planeId + '.drop{' + styles.drop.join(';') + '}')
      }
    }
    if (outputStyles.length) {
      html.push('<style id="styles">' + outputStyles.join('') + '</style>')
    }
    html.push('</head><body>' + body + '<script src="/front.build.js"></script>')
    html.push('<script>var build = new Build(')
    html.push(JSON.stringify(this.toJSON()))
    html.push(')</script></body>')
    return html.join('')
  } else {
    return body
  }
}

UI.prototype.get = function(plane, property){
  var value = plane[property]
  if (value && typeof value == 'object' && value.type) {
    var action = value
    var self = this
    if (property != 'id') {
      var id = this.get(plane, 'id')
    } else {
      var id = plane.id
    }

    checkAction(action, 0)

    function checkAction(action, depth, collector) {
      if (action.type == 'Access state') {
        var prop = action.input['Property name']
        if (prop && prop.type) {
          var result = self.front.dispatch(prop, plane)
          var p2 = self.updates.subscriptions[result] = self.updates.subscriptions[result] || {}
          if (typeof id == 'string') {
            p2[id] = p2[id] || {}
            p2[id][property] = true
          }
          // if (depth == 0) {
          var coll = []
          checkAction(prop, depth + 1, coll)
          coll.forEach(function(x){
            var p2 = self.updates.dynamicSubscriptions[x] = self.updates.dynamicSubscriptions[x] || {}
            if (typeof id == 'string') {
              p2[id] = p2[id] || {}
              p2[id][property] = prop
            }
          })
            return
          // } else {
          //   return checkAction(prop, depth + 1)
          // }
        }
        var p2 = self.updates.subscriptions[prop] = self.updates.subscriptions[prop] || {}
        if (typeof id == 'string') {
          p2[id] = p2[id] || {}
          p2[id][property] = true
        }
        if (collector) {
          collector.push(prop)
        }
      }
      checkActionInputs(action, depth, collector)
    }

    function checkActionInputs(action, depth, collector) {
      for (var key in action.input) {
        var val = action.input[key]
        if (val && typeof val == 'object' && val.type) {
          checkAction(val, depth + 1, collector)
        } else if (Array.isArray(val)) {
          for (var i = 0, n = val.length; i < n; i++) {
            if (val[i] && typeof val[i] == 'object' && val[i].type) {
              checkAction(val[i], depth + 1, collector)
            }
          }
        }
      }
    }
    value = this.front.dispatch(value, plane)
  }
  return value
  // return typeof value == 'string' ? value.replace(/\"/g, '\\"') : value
}

UI.prototype.toJSON = function() {
  return {
    toplevel: this.toplevel,
    handlers: this.handlers,
    subscriptions: this.subscriptions,
    dynamicSubscriptions: this.dynamicSubscriptions,
    children: this.children,
    planes: this.planes,
    keys: this.keys,
    templates: this.templates,
    state: this.state
  }
}
