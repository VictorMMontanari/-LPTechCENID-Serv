
/**
 * This is a build lambda gets.
 */

var Emitter = require('component-emitter')
var State = require('./state')

/**
 * Expose `Build`.
 */

module.exports = Build

/**
 * Initialize a new `Build`.
 */

function Build(obj) {
  if (!(this instanceof Build)) {
    for (var key in Build.prototype) {
      obj[key] = Build.prototype[key]
    }
    return
  }
  this.plugins = {}
  this.dispatch = this.dispatch.bind(this)
  this.resolve = this.resolve.bind(this)
  this.state = new State({})
}

/**
 * Mixin emitter.
 */

Emitter(Build.prototype)

/**
 * Dispatch an action.
 */

Build.prototype.dispatch = function(action, context, callback) {
  if (typeof context == 'function') {
    callback = context
    context = {}
  }

  context = context || {}

  var plugin = this.plugins[action.type]
  if (!plugin) throw new Error('No plugin ' + action.type)
  var self = this
  var output = action.output

  var state = this.state.merge({
    context: context,
    dispatch: function(value, cb){
      return self.dispatch(value, context, cb)
    },
    resolve: function(value, cb){
      return self.resolve(value, context, cb)
    },
    get: function(key){
      return self.state.vars[key]
    },
    set: function(key, value){
      self.state.vars[key] = value
    }
  })

  if (plugin.length == 2) {
    var value = plugin(state, action)
    if (output) {
      context[output] = value
    }
    if (callback) callback(null, value, context)
    return value
  }

  return plugin(state, action, function(err, value){
    if (err) console.error(err)
    // self.dispatch(action)
    if (output) {
      context[output] = value
    }
    if (callback) callback(err, value, context)
  })
}

/**
 * Add a plugin to the build.
 */

Build.prototype.use = function(mod) {
  mod(this)
  return this
}

/**
 * Add a plugin to the build.
 */

Build.prototype.plugin = function(name, plugin) {
  this.plugins[name] = plugin
  return this
}

Build.prototype.resolve = function(value, context, callback) {
  if (value && value.type) return this.dispatch(value, context, callback)
  return value
}
